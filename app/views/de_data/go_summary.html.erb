<style>
    div.tooltip {
        position: absolute;
        text-align: center;
        width: 180px;
        height: 28px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }
</style>

<%  default_filter = params[:filter] ? params[:filter] : DEFAULT_FILTER
    default_filter_value = params[:filter_value] ? params[:filter_value] : DEFAULT_FILTER_VALUE
    default_base_treatment = (params[:base_treatment])? params[:base_treatment] : DEFAULT_BASE_TREATMENT
    default_cluster_order = ['1','2','3','4']
    default_cluster_order.delete(default_base_treatment)
    default_ontology_root = params[:ontology_root] ? params[:ontology_root] : DEFAULT_ONTOLOGY_ROOT
%>

<%= form_tag({:controller => "de_data",:action => "go_summary"}, {:method => "get"}) do %>
    <%= hidden_field_tag(:experiment, params[:experiment])%>
    <%= hidden_field_tag(:analysis_id, params[:analysis_id])%>

    <table style="border:solid 3px #000000;">
      <tr style="background-color:white;">
        <th><%= label_tag(:base_treatment, "Base treatment") %></th>
        <th><%= label_tag(:filter, "Filter") %></th>
        <th><%= label_tag(:filter_value,"Filter value (0 to 1)") %></th>
        <th><%= label_tag(:ontology_root,"Ontology Root") %></th>
        <td><%= link_to("Table",params.merge({:controller => 'de_data', :action => 'index',:page => 1}))%></td>
      </tr><tr style="background-color:lightgray;" >
      <td style="background-color:white;"><%= select_tag(:base_treatment, options_for_select([["0uE","1"],["10uE","2"],["100uE","3"], ["500uE","4"]], default_base_treatment)) %></td>
      <td style="background-color:white;"><%= select_tag(:filter, options_for_select([["p-Val","pval"],["FDR", "fdr"]], default_filter)) %></td>
      <td style="background-color:white;"> < <%= text_field_tag(:filter_value, default_filter_value) %></td>
      <td style="background-color:white;"><%= select_tag(:ontology_root, options_for_select([['Biological Process','Biological Process'],['Molecular Function','Molecular Function'], ['Cellular Component','Cellular Component']], default_ontology_root)) %></td>
      <td style="background-color:white;"><%=submit_tag("Refresh")%></td>
    </tr>
    </table>
<% end %>

<table name='json' id="json"></table>


<script type="text/javascript">


    //height of each row in the heatmap
    var h = 6;
    //width of each column in the heatmap
    var w = 40;
    // top position of each heatmap
    var yTop = 0;
    // left position
    var xLeft = 0;

    //expression value label
    var expLab = d3.select("body").append("div") .attr("class", "tooltip") .style("opacity", 0);


    d3.json("<%= @local_url %>/go_json.json?experiment=<%=@experiment%>&analysis_id=<%=@analysis_id%>&base_treatment=<%=@base_treatment%>&filter=<%=@filter%>&filter_value=<%=@filter_value%>&ontology_root=<%=@ontology_root%>",
            function(jsonHash) {
        for (var go_term in jsonHash)  {
            var json = jsonHash[go_term];
            var cols = json['treatments'];
            var rows = json['accessions'];
            var total_transcripts = json['total_transcripts'];
            var minData = -1.5;
            var maxData = 1.5 ;
            var data = json['log2fc'];
            var total_transcripts = json['total_transcripts'];

//attach a SVG node to the document
//height and width defined by the row/column lengths
            var mySVG = d3.select("table#json")
                    .append("tr")
                    .append("td")
                    .append("svg")
                    .attr("width", (w * cols.length) + 500)
                    .attr("height", (h * rows.length + 100))
                    .style('position','relative')
                    .style('top',yTop)
                    .style('left',xLeft);

//define a color scale using the min and max expression values
            var colorScale = d3.scale.linear()
                    .domain([minData, 0, maxData])
                    .range(["blue", "black", "orange"]);

//generate the heatmap
            var heatmapRow = mySVG.selectAll(".heatmap")
                    .data(data)
                    .enter().append("g")
                    .attr('name',function(d,i) { return rows[i]})
                    .sort(function(a,b){
                        var acomp = "";
                        var bcomp = "";
                        var max_pval = <%= default_filter_value %> ;
                        for(var x = 0; x < a.length; x++) {
                            if(a[x][1] < max_pval && a[x][0] > 0){acomp += 'a';}
                            else if(a[x][1] < max_pval && a[x][0] < 0) {acomp += 'b';}
                            else {acomp += 'c';}
                        }
                        for(var x = 0; x < b.length; x++ ) {
                            if(b[x][1] < max_pval && b[x][0] > 0){bcomp += 'a';}
                            else if(b[x][1] < max_pval && b[x][0] < 0) {bcomp += 'b';}
                            else {bcomp += 'c';}
                        }
                        return acomp.localeCompare(bcomp);

                    });
            var iy = 0;
            var heatmapRects = heatmapRow
                    .selectAll(".rect")
                    .data(function(d,i) {
                        return d;
                    }).enter().append("svg:rect")
                    .attr('width',w)
                    .attr('height',h)
                    .attr('x', function(d,i) {
                        return (i * w) + 25;
                    })
                    .attr('y', function(d,i) {
                        if (i% d.length == 0){iy++}
                        return (iy * h) + 50;
                    })
                    .style('fill',function(d) {
                        var pval = d[1];
                        var max_pval = <%= default_filter_value %> ;
                        var color = d[0];
                        if(d[0] > 0){
                            color = maxData;
                        } else if(d[0] < 0){
                            color = minData;
                        }
                        if(d[1] > max_pval ){
                            color = 0;

                        }

                        return colorScale(color);
                    });



//Main label
            var mainLabel = mySVG.selectAll(".mainLabel")
                    .data([go_term])
                    .enter().append('svg:text')
                    .attr('x', 5)
                    .attr('y', 15)
                    .attr('class','label')
                    .style('text-anchor','left')
                    .text(function(d) {
                        t = (rows.length == 1)?" transcript of ":" transcripts of ";

                        return d + " : " + rows.length + t + total_transcripts;
                    });

//label columns
            var columnLabel = mySVG.selectAll(".colLabel")
                    .data(cols)
                    .enter().append('svg:text')
                    .attr('x', function(d,i) {
                        return ((i + 0.5) * w) + 25;
                    })
                    .attr('y', 40)
                    .attr('class','label')
                    .style('text-anchor','middle')
                    .text(function(d) {return d;});


            heatmapRow.on("mouseover", function(d, i) {
                d3.select(this)
                        .attr('stroke-width',4)
                        .attr('stroke','black');

                expLab
                        .transition()
                        .duration(200)
                        .style("opacity", 0.9);

                output = '<b>' + d3.select(this).attr('name') + '</b><br>';
                for (var j = 0 , count = d.length; j < count; j ++ ) {
                    output += d[j][0] + ", ";
                }
                expLab
                        .html(output.substring(0,output.length -2))
                        .style("left", (d3.event.pageX) + "px")
                        .style("top", (d3.event.pageY - 28) + "px");

            })
            .on("mouseout", function(d) {

                d3.select(this)
                        .attr('stroke-width',0)
                        .attr('stroke','none');
                expLab
                        .transition()
                        .duration(500)
                        .style("opacity", 0);
            })
            .on("click", function(d,i){
                accession = d3.select(this).attr('name')
                window.open('/blast_dbs/fastasearch?denominator=2&file=symb6master.fa&query=' + accession)
            });

            yTop = 'auto'
        }
    });

</script>
